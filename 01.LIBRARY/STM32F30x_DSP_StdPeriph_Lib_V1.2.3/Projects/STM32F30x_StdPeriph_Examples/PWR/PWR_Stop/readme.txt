/**
  @page PWR_Stop PWR STOP example
  
  @verbatim
  ******************** (C) COPYRIGHT 2015 STMicroelectronics *******************
  * @file    PWR/PWR_Stop/readme.txt 
  * @author  MCD Application Team
  * @version V1.1.2
  * @date    14-August-2015
  * @brief   Description of the PWR STOP example.
  ******************************************************************************
  *
  * Licensed under MCD-ST Liberty SW License Agreement V2, (the "License");
  * You may not use this file except in compliance with the License.
  * You may obtain a copy of the License at:
  *
  *        http://www.st.com/software_license_agreement_liberty_v2
  *
  * Unless required by applicable law or agreed to in writing, software 
  * distributed under the License is distributed on an "AS IS" BASIS, 
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *   
  ******************************************************************************
   @endverbatim

@par Example Description 

This example shows how to enter the system to STOP mode and wake-up using EXTI
Line interrupts. The EXTI Line sources are PE.6 and RTC Alarm.

The EXTI line6 is configured to generate interrupt on falling edge.
The EXTI line17(RTC Alarm) is configured to generate interrupt on rising edge.

The system enters and exits STOP mode as following:
After system start-up, the RTC is configured to generate an Alarm event then the 
system enters STOP mode. To wake-up from STOP mode you have to apply a falling
edge on EXTI line0, otherwise the  RTC Alarm will wake-up the system within 5 
seconds. After exit from STOP, the system clock is reconfigured to its previous 
state (as HSE and PLL are disabled in STOP mode).
Then, after a delay the system will enter again in STOP mode and exit in the way
described above. This behavior is repeated in an infinite loop.

Three leds LD2, LD3 and LD4 are used to monitor the system state as following:
 - LD1 On, LD3 Toggling: system in RUN mode
 - All LED off: system in STOP mode
 - LD2 is on if EXTI Line6 is used to exit from STOP
 - LD4 is on if EXTI line17(RTC Alarm) is used to exit from STOP 
            
@par Directory contents 

  - PWR/PWR_STOP/stm32f30x_conf.h     Library Configuration file
  - PWR/PWR_STOP/stm32f30x_it.c       Interrupt handlers
  - PWR/PWR_STOP/stm32f30x_it.h       Header for stm32f30x_it.c
  - PWR/PWR_STOP/main.c               Main program
  - PWR/PWR_STOP/system_stm32f30x.c   STM32F30x system source file

@note The "system_stm32f30x.c" is generated by an automatic clock configuration 
      system and can be easily customized to your own configuration. 
      To select different clock setup, use the "STM32F30x_Clock_Configuration_V1.0.0.xls" 
      provided with the AN4152 package available on <a href="http://www.st.com/internet/mcu/family/141.jsp">  ST Microcontrollers </a>
             
@par Hardware and Software environment

  - This example runs on STM32F303xC and STM32F303xE Devices.
  
  - This example has been tested with STMicroelectronics STM32303C-EVAL (STM32F30x)
    evaluation board and can be easily tailored to any other supported device 
    and development board.
    
  - STM32303C-EVAL Set-up 
    - Use LED1, LED2, LED3 and LED4 leds connected respectively to PE.09, PE.10 and PE.11 pins
    - Use the Key push-button connected to pin PE.06 (EXTI Line6).
    
@par How to use it ? 

In order to make the program work, you must do the following :
 - Copy all source files from this example folder to the template folder under
   Projects\STM32F30x_StdPeriph_Templates
 - Open your preferred toolchain 
 - Add the following file to the project source list
   - Utilities\STM32_EVAL\STM32303C_EVAL\stm32303c_eval.c
 - Rebuild all files and load your image into target memory
 - Run the example
    
 * <h3><center>&copy; COPYRIGHT STMicroelectronics</center></h3>
 */
