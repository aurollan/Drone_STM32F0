/**
  @page COMP_PWMSignalControl COMP1 PWM signal control example
  
  @verbatim
  ******************** (C) COPYRIGHT 2015 STMicroelectronics *******************
  * @file    COMP/COMP_PWMSignalControl/readme.txt 
  * @author  MCD Application Team
  * @version V1.1.2
  * @date    14-August-2015
  * @brief   Description of the COMP1 PWM signal control example.
  ******************************************************************************
  *
  * Licensed under MCD-ST Liberty SW License Agreement V2, (the "License");
  * You may not use this file except in compliance with the License.
  * You may obtain a copy of the License at:
  *
  *        http://www.st.com/software_license_agreement_liberty_v2
  *
  * Unless required by applicable law or agreed to in writing, software 
  * distributed under the License is distributed on an "AS IS" BASIS, 
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *   
  ******************************************************************************
   @endverbatim

@par Example Description 

This example shows how to configure COMP1 peripheral to hold on safe state
(high level) TIM1 channels as soon as COMP1 output is set at high level.

  - COMP1 is configured as following:
     - Inverting input is internally connected to VREFINT = 1.22V
     - Non Inverting input is connected to PA1
     - Output is internally connected to TIM1 BKIN (Break Input)

  - TIM1CLK is set to 72 MHz, the TIM1 Prescaler is equal to 0 so the TIM1 counter
    clock used is 72 MHz.
    TIM1 frequency is defined as follow:
    TIM1 channels frequency = TIM1 counter clock / (Period + 1) 
                            = 72000000 /(100 + 1) 
                            = 713 KHz.

  - External voltage should be connected to PA.01 (RV2 potentiometer can be used).

  - Connect an oscilloscope to TIM1 channel PA.08 to display waveform. 

  - While PA.01 is lower than VREFINT (1.22V), PWM signal is displayed on PA.08.
    While PA.01 is higher than VREFINT, PA.08 is in high level.
 
 

@par Directory contents 

  - COMP/COMP_PWMSignalControl/stm32f30x_conf.h    Library Configuration file
  - COMP/COMP_PWMSignalControl/stm32f30x_it.c      Interrupt handlers
  - COMP/COMP_PWMSignalControl/stm32f30x_it.h      Interrupt handlers header file
  - COMP/COMP_PWMSignalControl/main.c              Main program
  - COMP/COMP_PWMSignalControl/system_stm32f30x.c  STM32F30x system source file
  
@note The "system_stm32f30x.c" is generated by an automatic clock configuration 
      system and can be easily customized to your own configuration. 
      To select different clock setup, use the "STM32F30x_Clock_Configuration_V1.0.0.xls" 
      provided with the AN4152 package available on <a href="http://www.st.com/internet/mcu/family/141.jsp">  ST Microcontrollers </a>
         
@par Hardware and Software environment

  - This example runs on STM32F303xC and STM32F303xE Devices.
  
  - This example has been tested with STMicroelectronics STM32303C-EVAL (STM32F30x)
    evaluation board and can be easily tailored to any other supported device 
    and development board.

  - STM32303C-EVAL Set-up
    - RV2 Potentiometer connected to PC.01 pin.
    - Connect PA.01 to PC.01 pin using a wire.
    - Connect an oscilloscope to PA.08 pin to display waveform.

@par How to use it ? 

In order to make the program work, you must do the following :
 - Copy all source files from this example folder to the template folder under
   Projects\STM32F30x_StdPeriph_Templates
 - Open your preferred toolchain 
 - Rebuild all files and load your image into target memory
 - Run the example
   
 * <h3><center>&copy; COPYRIGHT STMicroelectronics</center></h3>
 */
